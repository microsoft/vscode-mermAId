{
  "name": "copilot-mermaid-diagram",
  "publisher": "Microsoft",
  "displayName": "vscode-mermAId",
  "description": "Exploration into Copilot Chat-powered Diagram Generation",
  "version": "0.0.1",
  "engines": {
    "vscode": "^1.94.0"
  },
  "categories": [
    "Chat"
  ],
  "enabledApiProposals": [
    "lmTools"
  ],
  "activationEvents": [],
  "main": "./dist/extension.js",
  "contributes": {
    "configuration": {
      "title": "mermaid",
      "type": "object",
      "properties": {
        "mermaid.searchForExtensions": {
          "type": "boolean",
          "default": true,
          "description": "Search for mermaid extensions when viewing mermaid source."
        }
      }
    },
    "chatParticipants": [
      {
        "id": "copilot-diagram.mermAId",
        "fullName": "mermAId Diagrams",
        "name": "mermAId",
        "description": "Work with diagrams in the chat",
        "isSticky": true,
        "commands": [
          {
            "name": "uml",
            "description": "Generate a UML diagram"
          },
          {
            "name": "iterate",
            "description": "Iterate on a diagram generated in a previous chat turn",
            "disambiguation": [
              {
                "category": "mermaid_iterate",
                "description": "The user wants to make a minor and directed edit to an already generated mermaid diagram",
                "examples": [
                  "Add class foo to the diagram",
                  "Change the color property of the class foo to blue",
                  "Remove the class foo from the diagram"
                ]
              }
            ]
          }
        ]
      }
    ],
    "languageModelTools": [
      {
        "name": "mermAId_get_symbol_definition",
        "tags": [
          "editors",
          "chat-tools-sample"
        ],
        "displayName": "Symbol Definition",
        "modelDescription": "Given a file path string and a list of symbols, this model returns the definitions of the specified symbols. For example, if the file 'x.py' is provided and the symbol 'abc' is requested, the model will find 'abc' in 'x.py' and return its definition from the file where it is actually defined, such as 'y.py'.",
        "icon": "$(files)",
        "canBeReferencedInPrompt": false,
        "parametersSchema": {
          "type": "object",
          "properties": {
            "symbols": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of symbols in the file to get the definition for.",
              "default": []
            },
            "fileString": {
              "type": "string",
              "description": "The path to the file represented as a string where you are finding these symbols you want to get the definition for. Or undefined if the location of the symbol is unknown.",
              "default": "none"
            }
          }
        },
        "supportedContentTypes": [
          "text/plain"
        ]
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "mermAId-container",
          "title": "Outline (Mermaid)",
          "icon": "./assets/mermaid.svg"
        }
      ]
    },
    "views": {
      "mermAId-container": [
        {
          "type": "webview",
          "id": "mermaid-outline-diagram",
          "name": "Mermaid Outline"
        }
      ]
    },
    "menus": {
      "view/title": [
        {
          "command": "copilot-mermAId-diagram.refresh-outline",
          "when": "view == mermaid-outline-diagram",
          "group": "navigation"
        },
        {
          "command": "copilot-mermAId-diagram.follow-outline",
          "when": "view == mermaid-outline-diagram",
          "group": "navigation"
        }
      ],
      "commandPalette": [
        {
          "command": "mermAId.openMarkdownFile",
          "when": "false"
        },
        {
          "command": "mermAId.openDiagramSvg",
          "when": "false"
        }
      ]
    },
    "commands": [
      {
        "command": "copilot-mermAId-diagram.refresh-outline",
        "title": "Refresh"
      },
      {
        "command": "copilot-mermAId-diagram.follow-outline",
        "title": "Follow"
      },
      {
        "command": "mermAId.openDiagramSvg",
        "title": "View rendered SVG"
      },
      {
        "command": "mermAId.openMarkdownFile",
        "title": "Open Markdown File"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "webpack",
    "watch": "webpack --watch",
    "postinstall": "npx vscode-dts dev",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "lint": "eslint src",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.8",
    "@types/node": "20.x",
    "@types/vscode": "^1.94.0",
    "@typescript-eslint/eslint-plugin": "^8.7.0",
    "@typescript-eslint/parser": "^8.7.0",
    "@vscode/prompt-tsx": "^0.3.0-alpha.3",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.4.1",
    "eslint": "^9.11.1",
    "ts-loader": "^9.5.1",
    "typescript": "^5.6.2",
    "webpack": "^5.95.0",
    "webpack-cli": "^5.1.4"
  },
  "dependencies": {
    "@vscode/codicons": "^0.0.36",
    "mermaid": "^11.3.0"
  }
}
